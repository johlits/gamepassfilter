// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome8 = Welcome8.FromJson(jsonString);

namespace GamePassFilter.Data.QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome8
    {
        [JsonProperty("Products")]
        public Product[] Products { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("LastModifiedDate")]
        public DateTimeOffset LastModifiedDate { get; set; }

        [JsonProperty("LocalizedProperties")]
        public ProductLocalizedProperty[] LocalizedProperties { get; set; }

        //[JsonProperty("MarketProperties")]
        //public ProductMarketProperty[] MarketProperties { get; set; }

        [JsonProperty("ProductASchema")]
        public string ProductASchema { get; set; }

        [JsonProperty("ProductBSchema")]
        public string ProductBSchema { get; set; }

        [JsonProperty("ProductId")]
        public string ProductId { get; set; }

        [JsonProperty("Properties")]
        public ProductProperties Properties { get; set; }

        [JsonProperty("AlternateIds")]
        public AlternateId[] AlternateIds { get; set; }

        [JsonProperty("DomainDataVersion")]
        public object DomainDataVersion { get; set; }

        [JsonProperty("IngestionSource")]
        public string IngestionSource { get; set; }

        [JsonProperty("IsMicrosoftProduct")]
        public bool IsMicrosoftProduct { get; set; }

        [JsonProperty("PreferredSkuId")]
        public string PreferredSkuId { get; set; }

        [JsonProperty("ProductType")]
        public string ProductType { get; set; }

        [JsonProperty("ValidationData")]
        public ValidationData ValidationData { get; set; }

        [JsonProperty("MerchandizingTags")]
        public object[] MerchandizingTags { get; set; }

        [JsonProperty("PartD")]
        public string PartD { get; set; }

        [JsonProperty("SandboxId")]
        public string SandboxId { get; set; }

        [JsonProperty("ProductFamily")]
        public string ProductFamily { get; set; }

        [JsonProperty("SchemaVersion")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SchemaVersion { get; set; }

        [JsonProperty("IsSandboxedProduct")]
        public bool IsSandboxedProduct { get; set; }

        [JsonProperty("ProductKind")]
        public string ProductKind { get; set; }

        [JsonProperty("ProductPolicies")]
        public ProductPolicies ProductPolicies { get; set; }

        //[JsonProperty("DisplaySkuAvailabilities")]
        //public DisplaySkuAvailability[] DisplaySkuAvailabilities { get; set; }
    }

    public partial class AlternateId
    {
        [JsonProperty("IdType")]
        public string IdType { get; set; }

        [JsonProperty("Value")]
        public string Value { get; set; }
    }

    public partial class DisplaySkuAvailability
    {
        [JsonProperty("Sku")]
        public Sku Sku { get; set; }

        [JsonProperty("Availabilities")]
        public Availability[] Availabilities { get; set; }
    }

    public partial class Availability
    {
        [JsonProperty("Actions")]
        public Action[] Actions { get; set; }

        //[JsonProperty("AvailabilityASchema")]
        //public AvailabilityASchema AvailabilityASchema { get; set; }

        //[JsonProperty("AvailabilityBSchema")]
        //public AvailabilityBSchema AvailabilityBSchema { get; set; }

        [JsonProperty("AvailabilityId")]
        public string AvailabilityId { get; set; }

        [JsonProperty("Conditions")]
        public Conditions Conditions { get; set; }

        [JsonProperty("LastModifiedDate")]
        public DateTimeOffset LastModifiedDate { get; set; }

        [JsonProperty("Markets")]
        public Market[] Markets { get; set; }

        [JsonProperty("OrderManagementData")]
        public OrderManagementData OrderManagementData { get; set; }

        [JsonProperty("Properties")]
        public AvailabilityProperties Properties { get; set; }

        [JsonProperty("SkuId")]
        public string SkuId { get; set; }

        [JsonProperty("DisplayRank")]
        public long DisplayRank { get; set; }

        [JsonProperty("AlternateIds", NullValueHandling = NullValueHandling.Ignore)]
        public AlternateId[] AlternateIds { get; set; }

        [JsonProperty("RemediationRequired")]
        public bool RemediationRequired { get; set; }

        [JsonProperty("Remediations", NullValueHandling = NullValueHandling.Ignore)]
        public AvailabilityRemediation[] Remediations { get; set; }

        [JsonProperty("LicensingData", NullValueHandling = NullValueHandling.Ignore)]
        public LicensingData LicensingData { get; set; }

        [JsonProperty("AffirmationId", NullValueHandling = NullValueHandling.Ignore)]
        public string AffirmationId { get; set; }
    }

    public partial class Conditions
    {
        [JsonProperty("ClientConditions")]
        public ClientConditions ClientConditions { get; set; }

        [JsonProperty("EndDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("ResourceSetIds")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public long[] ResourceSetIds { get; set; }

        [JsonProperty("StartDate")]
        public DateTimeOffset StartDate { get; set; }
    }

    public partial class ClientConditions
    {
        [JsonProperty("AllowedPlatforms")]
        public AllowedPlatform[] AllowedPlatforms { get; set; }
    }

    public partial class AllowedPlatform
    {
        [JsonProperty("MaxVersion")]
        public long MaxVersion { get; set; }

        [JsonProperty("MinVersion")]
        public long MinVersion { get; set; }

        [JsonProperty("PlatformName")]
        public string PlatformName { get; set; }
    }

    public partial class LicensingData
    {
        [JsonProperty("SatisfyingEntitlementKeys")]
        public SatisfyingEntitlementKey[] SatisfyingEntitlementKeys { get; set; }
    }

    public partial class SatisfyingEntitlementKey
    {
        [JsonProperty("EntitlementKeys")]
        public string[] EntitlementKeys { get; set; }

        [JsonProperty("LicensingKeyIds")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public long[] LicensingKeyIds { get; set; }
    }

    public partial class OrderManagementData
    {
        [JsonProperty("GrantedEntitlementKeys")]
        public object[] GrantedEntitlementKeys { get; set; }

        [JsonProperty("PIFilter", NullValueHandling = NullValueHandling.Ignore)]
        public PiFilter PiFilter { get; set; }

        [JsonProperty("Price")]
        public Price Price { get; set; }

        [JsonProperty("OrderManagementPolicyIdOverride", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderManagementPolicyIdOverride { get; set; }

        [JsonProperty("GeofencingPolicyId", NullValueHandling = NullValueHandling.Ignore)]
        public string GeofencingPolicyId { get; set; }
    }

    public partial class PiFilter
    {
        [JsonProperty("ExclusionProperties")]
        public string[] ExclusionProperties { get; set; }

        [JsonProperty("InclusionProperties")]
        public string[] InclusionProperties { get; set; }
    }

    public partial class Price
    {
        //[JsonProperty("CurrencyCode")]
        //public CurrencyCode CurrencyCode { get; set; }

        [JsonProperty("IsPIRequired")]
        public bool IsPiRequired { get; set; }

        [JsonProperty("ListPrice")]
        public double ListPrice { get; set; }

        [JsonProperty("MSRP")]
        public double Msrp { get; set; }

        //[JsonProperty("TaxType")]
        //public TaxType TaxType { get; set; }

        //[JsonProperty("WholesaleCurrencyCode")]
        //public CurrencyCode WholesaleCurrencyCode { get; set; }

        [JsonProperty("WholesalePrice", NullValueHandling = NullValueHandling.Ignore)]
        public double? WholesalePrice { get; set; }
    }

    public partial class AvailabilityProperties
    {
        [JsonProperty("OriginalReleaseDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OriginalReleaseDate { get; set; }
    }

    public partial class AvailabilityRemediation
    {
        [JsonProperty("RemediationId")]
        public string RemediationId { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("BigId")]
        public string BigId { get; set; }
    }

    public partial class Sku
    {
        [JsonProperty("LastModifiedDate")]
        public DateTimeOffset LastModifiedDate { get; set; }

        [JsonProperty("LocalizedProperties")]
        public SkuLocalizedProperty[] LocalizedProperties { get; set; }

        //[JsonProperty("MarketProperties")]
        //public SkuMarketProperty[] MarketProperties { get; set; }

        [JsonProperty("ProductId")]
        public string ProductId { get; set; }

        [JsonProperty("Properties")]
        public SkuProperties Properties { get; set; }

        [JsonProperty("SkuASchema")]
        public string SkuASchema { get; set; }

        [JsonProperty("SkuBSchema")]
        public string SkuBSchema { get; set; }

        [JsonProperty("SkuId")]
        public string SkuId { get; set; }

        [JsonProperty("SkuType")]
        public string SkuType { get; set; }

        [JsonProperty("RecurrencePolicy")]
        public object RecurrencePolicy { get; set; }

        [JsonProperty("SubscriptionPolicyId")]
        public object SubscriptionPolicyId { get; set; }
    }

    public partial class SkuLocalizedProperty
    {
        [JsonProperty("Contributors")]
        public object[] Contributors { get; set; }

        [JsonProperty("Features")]
        public object[] Features { get; set; }

        [JsonProperty("MinimumNotes")]
        public string MinimumNotes { get; set; }

        [JsonProperty("RecommendedNotes")]
        public string RecommendedNotes { get; set; }

        [JsonProperty("ReleaseNotes")]
        public string ReleaseNotes { get; set; }

        [JsonProperty("DisplayPlatformProperties")]
        public object DisplayPlatformProperties { get; set; }

        [JsonProperty("SkuDescription")]
        public string SkuDescription { get; set; }

        [JsonProperty("SkuTitle")]
        public string SkuTitle { get; set; }

        [JsonProperty("SkuButtonTitle")]
        public string SkuButtonTitle { get; set; }

        [JsonProperty("DeliveryDateOverlay")]
        public object DeliveryDateOverlay { get; set; }

        [JsonProperty("SkuDisplayRank")]
        public object[] SkuDisplayRank { get; set; }

        [JsonProperty("TextResources")]
        public object TextResources { get; set; }

        [JsonProperty("Images")]
        public object[] Images { get; set; }

        [JsonProperty("LegalText")]
        public LegalText LegalText { get; set; }

        [JsonProperty("Language")]
        public string Language { get; set; }

        [JsonProperty("Markets")]
        public string[] Markets { get; set; }
    }

    public partial class LegalText
    {
        [JsonProperty("AdditionalLicenseTerms")]
        public string AdditionalLicenseTerms { get; set; }

        [JsonProperty("Copyright")]
        public string Copyright { get; set; }

        [JsonProperty("CopyrightUri")]
        public string CopyrightUri { get; set; }

        [JsonProperty("PrivacyPolicy")]
        public string PrivacyPolicy { get; set; }

        [JsonProperty("PrivacyPolicyUri")]
        public Uri PrivacyPolicyUri { get; set; }

        [JsonProperty("Tou")]
        public string Tou { get; set; }

        [JsonProperty("TouUri")]
        public string TouUri { get; set; }
    }

    public partial class SkuMarketProperty
    {
        [JsonProperty("FirstAvailableDate")]
        public DateTimeOffset FirstAvailableDate { get; set; }

        [JsonProperty("SupportedLanguages")]
        public string[] SupportedLanguages { get; set; }

        [JsonProperty("PackageIds")]
        public object PackageIds { get; set; }

        [JsonProperty("PIFilter")]
        public object PiFilter { get; set; }

        [JsonProperty("Markets")]
        public Market[] Markets { get; set; }
    }

    public partial class SkuProperties
    {
        [JsonProperty("EarlyAdopterEnrollmentUrl")]
        public object EarlyAdopterEnrollmentUrl { get; set; }

        [JsonProperty("FulfillmentData")]
        public FulfillmentData FulfillmentData { get; set; }

        [JsonProperty("FulfillmentType")]
        public string FulfillmentType { get; set; }

        [JsonProperty("FulfillmentPluginId")]
        public object FulfillmentPluginId { get; set; }

        [JsonProperty("HasThirdPartyIAPs")]
        public bool HasThirdPartyIaPs { get; set; }

        [JsonProperty("LastUpdateDate")]
        public DateTimeOffset LastUpdateDate { get; set; }

        [JsonProperty("HardwareProperties")]
        public HardwareProperties HardwareProperties { get; set; }

        [JsonProperty("HardwareRequirements")]
        public object[] HardwareRequirements { get; set; }

        [JsonProperty("HardwareWarningList")]
        public object[] HardwareWarningList { get; set; }

        [JsonProperty("InstallationTerms")]
        public string InstallationTerms { get; set; }

        [JsonProperty("Packages")]
        public Package[] Packages { get; set; }

        [JsonProperty("VersionString")]
        public string VersionString { get; set; }

        [JsonProperty("SkuDisplayGroupIds")]
        public string[] SkuDisplayGroupIds { get; set; }

        [JsonProperty("XboxXPA")]
        public bool XboxXpa { get; set; }

        [JsonProperty("BundledSkus")]
        public object[] BundledSkus { get; set; }

        [JsonProperty("IsRepurchasable")]
        public bool IsRepurchasable { get; set; }

        [JsonProperty("SkuDisplayRank")]
        public long SkuDisplayRank { get; set; }

        [JsonProperty("DisplayPhysicalStoreInventory")]
        public object DisplayPhysicalStoreInventory { get; set; }

        [JsonProperty("VisibleToB2BServiceIds")]
        public object[] VisibleToB2BServiceIds { get; set; }

        [JsonProperty("AdditionalIdentifiers")]
        public object[] AdditionalIdentifiers { get; set; }

        [JsonProperty("IsTrial")]
        public bool IsTrial { get; set; }

        [JsonProperty("IsPreOrder")]
        public bool IsPreOrder { get; set; }

        [JsonProperty("IsBundle")]
        public bool IsBundle { get; set; }
    }

    public partial class FulfillmentData
    {
        [JsonProperty("ProductId")]
        public string ProductId { get; set; }

        [JsonProperty("WuBundleId")]
        public Guid WuBundleId { get; set; }

        [JsonProperty("WuCategoryId")]
        public Guid WuCategoryId { get; set; }

        [JsonProperty("PackageFamilyName")]
        public string PackageFamilyName { get; set; }

        [JsonProperty("SkuId")]
        public string SkuId { get; set; }

        [JsonProperty("Content")]
        public object Content { get; set; }

        [JsonProperty("PackageFeatures")]
        public object PackageFeatures { get; set; }
    }

    public partial class HardwareProperties
    {
        [JsonProperty("MinimumHardware")]
        public object[] MinimumHardware { get; set; }

        [JsonProperty("RecommendedHardware")]
        public object[] RecommendedHardware { get; set; }

        [JsonProperty("MinimumProcessor")]
        public string MinimumProcessor { get; set; }

        [JsonProperty("RecommendedProcessor")]
        public string RecommendedProcessor { get; set; }

        [JsonProperty("MinimumGraphics")]
        public string MinimumGraphics { get; set; }

        [JsonProperty("RecommendedGraphics")]
        public string RecommendedGraphics { get; set; }
    }

    public partial class Package
    {
        [JsonProperty("Applications")]
        public object[] Applications { get; set; }

        [JsonProperty("Architectures")]
        public string[] Architectures { get; set; }

        [JsonProperty("Capabilities")]
        public object[] Capabilities { get; set; }

        [JsonProperty("DeviceCapabilities")]
        public object[] DeviceCapabilities { get; set; }

        [JsonProperty("ExperienceIds")]
        public object[] ExperienceIds { get; set; }

        [JsonProperty("FrameworkDependencies")]
        public object[] FrameworkDependencies { get; set; }

        [JsonProperty("HardwareDependencies")]
        public object[] HardwareDependencies { get; set; }

        [JsonProperty("HardwareRequirements")]
        public object[] HardwareRequirements { get; set; }

        [JsonProperty("Hash")]
        public string Hash { get; set; }

        [JsonProperty("HashAlgorithm")]
        public string HashAlgorithm { get; set; }

        [JsonProperty("IsStreamingApp")]
        public bool IsStreamingApp { get; set; }

        [JsonProperty("Languages")]
        public object[] Languages { get; set; }

        [JsonProperty("MaxDownloadSizeInBytes")]
        public long MaxDownloadSizeInBytes { get; set; }

        [JsonProperty("MaxInstallSizeInBytes")]
        public long MaxInstallSizeInBytes { get; set; }

        [JsonProperty("PackageFormat")]
        public string PackageFormat { get; set; }

        [JsonProperty("PackageFamilyName")]
        public object PackageFamilyName { get; set; }

        [JsonProperty("MainPackageFamilyNameForDlc")]
        public object MainPackageFamilyNameForDlc { get; set; }

        [JsonProperty("PackageFullName")]
        public string PackageFullName { get; set; }

        [JsonProperty("PackageId")]
        public Guid PackageId { get; set; }

        [JsonProperty("ContentId")]
        public Guid ContentId { get; set; }

        [JsonProperty("KeyId")]
        public Guid KeyId { get; set; }

        [JsonProperty("PackageRank")]
        public long PackageRank { get; set; }

        [JsonProperty("PackageUri")]
        public Uri PackageUri { get; set; }

        [JsonProperty("PlatformDependencies")]
        public PlatformDependency[] PlatformDependencies { get; set; }

        [JsonProperty("PlatformDependencyXmlBlob")]
        public string PlatformDependencyXmlBlob { get; set; }

        [JsonProperty("ResourceId")]
        public string ResourceId { get; set; }

        [JsonProperty("Version")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Version { get; set; }

        [JsonProperty("PackageDownloadUris")]
        public PackageDownloadUris[] PackageDownloadUris { get; set; }

        [JsonProperty("DriverDependencies")]
        public object[] DriverDependencies { get; set; }

        [JsonProperty("FulfillmentData")]
        public FulfillmentData FulfillmentData { get; set; }
    }

    public partial class PackageDownloadUris
    {
        [JsonProperty("Rank")]
        public long Rank { get; set; }

        [JsonProperty("Uri")]
        public Uri Uri { get; set; }
    }

    public partial class PlatformDependency
    {
        [JsonProperty("MaxTested")]
        public long MaxTested { get; set; }

        [JsonProperty("MinVersion")]
        public long MinVersion { get; set; }

        [JsonProperty("PlatformName")]
        public string PlatformName { get; set; }
    }

    public partial class ProductLocalizedProperty
    {
        [JsonProperty("DeveloperName")]
        public string DeveloperName { get; set; }

        [JsonProperty("PublisherName")]
        public string PublisherName { get; set; }

        [JsonProperty("PublisherWebsiteUri")]
        public string PublisherWebsiteUri { get; set; }

        [JsonProperty("SupportUri")]
        public string SupportUri { get; set; }

        [JsonProperty("EligibilityProperties")]
        public EligibilityProperties EligibilityProperties { get; set; }

        [JsonProperty("Franchises")]
        public object[] Franchises { get; set; }

        [JsonProperty("Images")]
        public Image[] Images { get; set; }

        [JsonProperty("Videos")]
        public Video[] Videos { get; set; }

        [JsonProperty("ProductDescription")]
        public string ProductDescription { get; set; }

        [JsonProperty("ProductTitle")]
        public string ProductTitle { get; set; }

        [JsonProperty("ShortTitle")]
        public string ShortTitle { get; set; }

        [JsonProperty("SortTitle")]
        public string SortTitle { get; set; }

        [JsonProperty("FriendlyTitle")]
        public object FriendlyTitle { get; set; }

        [JsonProperty("ShortDescription")]
        public string ShortDescription { get; set; }

        [JsonProperty("SearchTitles")]
        public SearchTitle[] SearchTitles { get; set; }

        [JsonProperty("VoiceTitle")]
        public string VoiceTitle { get; set; }

        [JsonProperty("RenderGroupDetails")]
        public object RenderGroupDetails { get; set; }

        [JsonProperty("ProductDisplayRanks")]
        public object[] ProductDisplayRanks { get; set; }

        [JsonProperty("InteractiveModelConfig")]
        public object InteractiveModelConfig { get; set; }

        [JsonProperty("Interactive3DEnabled")]
        public bool Interactive3DEnabled { get; set; }

        [JsonProperty("Language")]
        public string Language { get; set; }

        [JsonProperty("Markets")]
        public string[] Markets { get; set; }
    }

    public partial class EligibilityProperties
    {
        [JsonProperty("Remediations")]
        public EligibilityPropertiesRemediation[] Remediations { get; set; }

        [JsonProperty("Affirmations")]
        public Affirmation[] Affirmations { get; set; }
    }

    public partial class Affirmation
    {
        [JsonProperty("AffirmationId")]
        public string AffirmationId { get; set; }

        [JsonProperty("AffirmationProductId")]
        public string AffirmationProductId { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }
    }

    public partial class EligibilityPropertiesRemediation
    {
        [JsonProperty("RemediationId")]
        public string RemediationId { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("FileId")]
        public string FileId { get; set; }

        [JsonProperty("EISListingIdentifier")]
        public object EisListingIdentifier { get; set; }

        [JsonProperty("BackgroundColor")]
        public string BackgroundColor { get; set; }

        [JsonProperty("Caption")]
        public string Caption { get; set; }

        [JsonProperty("FileSizeInBytes")]
        public long FileSizeInBytes { get; set; }

        [JsonProperty("ForegroundColor")]
        public string ForegroundColor { get; set; }

        [JsonProperty("Height")]
        public long Height { get; set; }

        [JsonProperty("ImagePositionInfo")]
        public string ImagePositionInfo { get; set; }

        [JsonProperty("ImagePurpose")]
        public string ImagePurpose { get; set; }

        [JsonProperty("UnscaledImageSHA256Hash")]
        public string UnscaledImageSha256Hash { get; set; }

        [JsonProperty("Uri")]
        public string Uri { get; set; }

        [JsonProperty("Width")]
        public long Width { get; set; }
    }

    public partial class SearchTitle
    {
        [JsonProperty("SearchTitleString")]
        public string SearchTitleString { get; set; }

        [JsonProperty("SearchTitleType")]
        public string SearchTitleType { get; set; }
    }

    public partial class Video
    {
        [JsonProperty("Uri")]
        public Uri Uri { get; set; }

        [JsonProperty("VideoPurpose")]
        public string VideoPurpose { get; set; }

        [JsonProperty("Height")]
        public long Height { get; set; }

        [JsonProperty("Width")]
        public long Width { get; set; }

        [JsonProperty("AudioEncoding")]
        public string AudioEncoding { get; set; }

        [JsonProperty("VideoEncoding")]
        public string VideoEncoding { get; set; }

        [JsonProperty("VideoPositionInfo")]
        public string VideoPositionInfo { get; set; }

        [JsonProperty("Caption")]
        public string Caption { get; set; }

        [JsonProperty("FileSizeInBytes")]
        public long FileSizeInBytes { get; set; }

        [JsonProperty("PreviewImage")]
        public Image PreviewImage { get; set; }

        [JsonProperty("SortOrder")]
        public long SortOrder { get; set; }
    }

    public partial class ProductMarketProperty
    {
        [JsonProperty("OriginalReleaseDate")]
        public DateTimeOffset OriginalReleaseDate { get; set; }

        [JsonProperty("MinimumUserAge")]
        public long MinimumUserAge { get; set; }

        [JsonProperty("ContentRatings")]
        public ContentRating[] ContentRatings { get; set; }

        [JsonProperty("RelatedProducts")]
        public RelatedProduct[] RelatedProducts { get; set; }

        [JsonProperty("UsageData")]
        public UsageDatum[] UsageData { get; set; }

        [JsonProperty("BundleConfig")]
        public object BundleConfig { get; set; }

        [JsonProperty("Markets")]
        public Market[] Markets { get; set; }
    }

    public partial class ContentRating
    {
        [JsonProperty("RatingSystem")]
        public string RatingSystem { get; set; }

        [JsonProperty("RatingId")]
        public string RatingId { get; set; }

        [JsonProperty("RatingDescriptors")]
        public string[] RatingDescriptors { get; set; }

        [JsonProperty("RatingDisclaimers")]
        public string[] RatingDisclaimers { get; set; }

        [JsonProperty("InteractiveElements")]
        public string[] InteractiveElements { get; set; }
    }

    public partial class RelatedProduct
    {
        [JsonProperty("RelatedProductId")]
        public string RelatedProductId { get; set; }

        [JsonProperty("RelationshipType")]
        public RelationshipType RelationshipType { get; set; }
    }

    public partial class UsageDatum
    {
        [JsonProperty("AggregateTimeSpan")]
        public string AggregateTimeSpan { get; set; }

        [JsonProperty("AverageRating")]
        public double AverageRating { get; set; }

        [JsonProperty("PlayCount")]
        public long PlayCount { get; set; }

        [JsonProperty("RatingCount")]
        public long RatingCount { get; set; }

        [JsonProperty("RentalCount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RentalCount { get; set; }

        [JsonProperty("TrialCount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TrialCount { get; set; }

        [JsonProperty("PurchaseCount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PurchaseCount { get; set; }
    }

    public partial class ProductPolicies
    {
    }

    public partial class ProductProperties
    {
        [JsonProperty("Attributes")]
        public Attribute[] Attributes { get; set; }

        [JsonProperty("CanInstallToSDCard")]
        public bool CanInstallToSdCard { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("Categories")]
        public string[] Categories { get; set; }

        [JsonProperty("Subcategory")]
        public object Subcategory { get; set; }

        [JsonProperty("IsAccessible")]
        public bool IsAccessible { get; set; }

        [JsonProperty("IsDemo")]
        public bool IsDemo { get; set; }

        [JsonProperty("IsLineOfBusinessApp")]
        public bool IsLineOfBusinessApp { get; set; }

        [JsonProperty("IsPublishedToLegacyWindowsPhoneStore")]
        public bool IsPublishedToLegacyWindowsPhoneStore { get; set; }

        [JsonProperty("IsPublishedToLegacyWindowsStore")]
        public bool IsPublishedToLegacyWindowsStore { get; set; }

        [JsonProperty("PackageFamilyName")]
        public string PackageFamilyName { get; set; }

        [JsonProperty("PackageIdentityName")]
        public string PackageIdentityName { get; set; }

        [JsonProperty("PublisherCertificateName")]
        public string PublisherCertificateName { get; set; }

        [JsonProperty("PublisherId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PublisherId { get; set; }

        [JsonProperty("SkuDisplayGroups")]
        public SkuDisplayGroup[] SkuDisplayGroups { get; set; }

        [JsonProperty("XboxLiveTier")]
        public string XboxLiveTier { get; set; }

        [JsonProperty("XboxXPA")]
        public object XboxXpa { get; set; }

        [JsonProperty("XboxCrossGenSetId")]
        public object XboxCrossGenSetId { get; set; }

        [JsonProperty("XboxConsoleGenOptimized")]
        public string[] XboxConsoleGenOptimized { get; set; }

        [JsonProperty("XboxConsoleGenCompatible")]
        public string[] XboxConsoleGenCompatible { get; set; }

        [JsonProperty("XboxLiveGoldRequired")]
        public bool XboxLiveGoldRequired { get; set; }

        [JsonProperty("ExtendedMetadata")]
        public string ExtendedMetadata { get; set; }

        [JsonProperty("XBOX")]
        public object Xbox { get; set; }

        [JsonProperty("OwnershipType")]
        public object OwnershipType { get; set; }

        [JsonProperty("PdpBackgroundColor")]
        public string PdpBackgroundColor { get; set; }

        [JsonProperty("HasAddOns")]
        public bool HasAddOns { get; set; }

        [JsonProperty("RevisionId")]
        public DateTimeOffset RevisionId { get; set; }

        [JsonProperty("ProductGroupId")]
        public Guid ProductGroupId { get; set; }

        [JsonProperty("ProductGroupName")]
        public string ProductGroupName { get; set; }
    }

    public partial class Attribute
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Minimum")]
        public long? Minimum { get; set; }

        [JsonProperty("Maximum")]
        public long? Maximum { get; set; }

        [JsonProperty("ApplicablePlatforms")]
        public string[] ApplicablePlatforms { get; set; }

        [JsonProperty("Group")]
        public object Group { get; set; }
    }

    public partial class SkuDisplayGroup
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Treatment")]
        public string Treatment { get; set; }
    }

    public partial class ValidationData
    {
        [JsonProperty("PassedValidation")]
        public bool PassedValidation { get; set; }

        [JsonProperty("RevisionId")]
        public string RevisionId { get; set; }

        [JsonProperty("ValidationResultUri")]
        public string ValidationResultUri { get; set; }
    }

    public enum Action { Browse, Curate, Details, Fulfill, Gift, License, Purchase, Redeem };

    public enum AvailabilityASchema { Availability3 };

    public enum AvailabilityBSchema { AvailabilityGame1 };

    public enum Market { Us };

    public enum CurrencyCode { Empty, Usd };

    public enum TaxType { Empty, TaxesNotIncluded };

    public enum RelationshipType { Bundle };

    public partial struct Value
    {
        public long? Integer;
        public Guid? Uuid;

        public static implicit operator Value(long Integer) => new Value { Integer = Integer };
        public static implicit operator Value(Guid Uuid) => new Value { Uuid = Uuid };
    }

    public partial class Welcome8
    {
        public static Welcome8 FromJson(string json) => JsonConvert.DeserializeObject<Welcome8>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome8 self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueConverter.Singleton,
                ActionConverter.Singleton,
                AvailabilityASchemaConverter.Singleton,
                AvailabilityBSchemaConverter.Singleton,
                MarketConverter.Singleton,
                CurrencyCodeConverter.Singleton,
                TaxTypeConverter.Singleton,
                RelationshipTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new Value { Integer = l };
                    }
                    Guid guid;
                    if (Guid.TryParse(stringValue, out guid))
                    {
                        return new Value { Uuid = guid };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            if (value.Uuid != null)
            {
                serializer.Serialize(writer, value.Uuid.Value.ToString("D", System.Globalization.CultureInfo.InvariantCulture));
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class ActionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Action) || t == typeof(Action?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Browse":
                    return Action.Browse;
                case "Curate":
                    return Action.Curate;
                case "Details":
                    return Action.Details;
                case "Fulfill":
                    return Action.Fulfill;
                case "Gift":
                    return Action.Gift;
                case "License":
                    return Action.License;
                case "Purchase":
                    return Action.Purchase;
                case "Redeem":
                    return Action.Redeem;
            }
            throw new Exception("Cannot unmarshal type Action");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Action)untypedValue;
            switch (value)
            {
                case Action.Browse:
                    serializer.Serialize(writer, "Browse");
                    return;
                case Action.Curate:
                    serializer.Serialize(writer, "Curate");
                    return;
                case Action.Details:
                    serializer.Serialize(writer, "Details");
                    return;
                case Action.Fulfill:
                    serializer.Serialize(writer, "Fulfill");
                    return;
                case Action.Gift:
                    serializer.Serialize(writer, "Gift");
                    return;
                case Action.License:
                    serializer.Serialize(writer, "License");
                    return;
                case Action.Purchase:
                    serializer.Serialize(writer, "Purchase");
                    return;
                case Action.Redeem:
                    serializer.Serialize(writer, "Redeem");
                    return;
            }
            throw new Exception("Cannot marshal type Action");
        }

        public static readonly ActionConverter Singleton = new ActionConverter();
    }

    internal class AvailabilityASchemaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvailabilityASchema) || t == typeof(AvailabilityASchema?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Availability;3")
            {
                return AvailabilityASchema.Availability3;
            }
            throw new Exception("Cannot unmarshal type AvailabilityASchema");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvailabilityASchema)untypedValue;
            if (value == AvailabilityASchema.Availability3)
            {
                serializer.Serialize(writer, "Availability;3");
                return;
            }
            throw new Exception("Cannot marshal type AvailabilityASchema");
        }

        public static readonly AvailabilityASchemaConverter Singleton = new AvailabilityASchemaConverter();
    }

    internal class AvailabilityBSchemaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvailabilityBSchema) || t == typeof(AvailabilityBSchema?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "AvailabilityGame;1")
            {
                return AvailabilityBSchema.AvailabilityGame1;
            }
            throw new Exception("Cannot unmarshal type AvailabilityBSchema");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvailabilityBSchema)untypedValue;
            if (value == AvailabilityBSchema.AvailabilityGame1)
            {
                serializer.Serialize(writer, "AvailabilityGame;1");
                return;
            }
            throw new Exception("Cannot marshal type AvailabilityBSchema");
        }

        public static readonly AvailabilityBSchemaConverter Singleton = new AvailabilityBSchemaConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long[]);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (long[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class MarketConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Market) || t == typeof(Market?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return Market.Us;
            }
            throw new Exception("Cannot unmarshal type Market");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Market)untypedValue;
            if (value == Market.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type Market");
        }

        public static readonly MarketConverter Singleton = new MarketConverter();
    }

    internal class CurrencyCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CurrencyCode) || t == typeof(CurrencyCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return CurrencyCode.Empty;
                case "USD":
                    return CurrencyCode.Usd;
            }
            throw new Exception("Cannot unmarshal type CurrencyCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CurrencyCode)untypedValue;
            switch (value)
            {
                case CurrencyCode.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case CurrencyCode.Usd:
                    serializer.Serialize(writer, "USD");
                    return;
            }
            throw new Exception("Cannot marshal type CurrencyCode");
        }

        public static readonly CurrencyCodeConverter Singleton = new CurrencyCodeConverter();
    }

    internal class TaxTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TaxType) || t == typeof(TaxType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return TaxType.Empty;
                case "TaxesNotIncluded":
                    return TaxType.TaxesNotIncluded;
            }
            throw new Exception("Cannot unmarshal type TaxType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TaxType)untypedValue;
            switch (value)
            {
                case TaxType.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case TaxType.TaxesNotIncluded:
                    serializer.Serialize(writer, "TaxesNotIncluded");
                    return;
            }
            throw new Exception("Cannot marshal type TaxType");
        }

        public static readonly TaxTypeConverter Singleton = new TaxTypeConverter();
    }

    internal class RelationshipTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RelationshipType) || t == typeof(RelationshipType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Bundle")
            {
                return RelationshipType.Bundle;
            }
            throw new Exception("Cannot unmarshal type RelationshipType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RelationshipType)untypedValue;
            if (value == RelationshipType.Bundle)
            {
                serializer.Serialize(writer, "Bundle");
                return;
            }
            throw new Exception("Cannot marshal type RelationshipType");
        }

        public static readonly RelationshipTypeConverter Singleton = new RelationshipTypeConverter();
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace GamePassFilter.Data
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using CodeBeautify;
    //
    //    var welcome9 = Welcome9.FromJson(jsonString);

    namespace CodeBeautify
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Welcome9
        {
            [JsonProperty("_id")]
            public string Id { get; set; }

            [JsonProperty("magic")]
            public long Magic { get; set; }

            [JsonProperty("isChosen")]
            public bool IsChosen { get; set; }

            [JsonProperty("title")]
            public string Title { get; set; }

            [JsonProperty("publishedDate")]
            public DateTimeOffset PublishedDate { get; set; }

            [JsonProperty("externalUrl")]
            public Uri ExternalUrl { get; set; }

            [JsonProperty("snippet")]
            public string Snippet { get; set; }

            //[JsonProperty("language")]
            //public Language Language { get; set; }

            [JsonProperty("score")]
            public long? Score { get; set; }

            [JsonProperty("npScore")]
            public long? NpScore { get; set; }

            [JsonProperty("isQuoteManual")]
            public bool? IsQuoteManual { get; set; }

            [JsonProperty("Authors")]
            public Author[] Authors { get; set; }

            [JsonProperty("ScoreFormat")]
            public ScoreFormat ScoreFormat { get; set; }

            //[JsonProperty("Platforms")]
            //public Author[] Platforms { get; set; }

            [JsonProperty("alias")]
            public string Alias { get; set; }

            [JsonProperty("game")]
            public Game Game { get; set; }

            [JsonProperty("Outlet")]
            public Outlet Outlet { get; set; }

            [JsonProperty("createdAt")]
            public DateTimeOffset CreatedAt { get; set; }

            [JsonProperty("updatedAt")]
            public DateTimeOffset UpdatedAt { get; set; }

            [JsonProperty("__v")]
            public long V { get; set; }

            [JsonProperty("blend_magic")]
            public long BlendMagic { get; set; }

            [JsonProperty("overrideRecommendation", NullValueHandling = NullValueHandling.Ignore)]
            public bool? OverrideRecommendation { get; set; }

            [JsonProperty("medianAtTimeOfReview", NullValueHandling = NullValueHandling.Ignore)]
            public long? MedianAtTimeOfReview { get; set; }
        }

        public partial class Author
        {
            [JsonProperty("_id")]
            public string Id { get; set; }

            [JsonProperty("id")]
            public long AuthorId { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Image { get; set; }

            [JsonProperty("shortName", NullValueHandling = NullValueHandling.Ignore)]
            public ShortName? ShortName { get; set; }
        }

        public partial class Game
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }
        }

        public partial class Outlet
        {
            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("isContributor")]
            public bool IsContributor { get; set; }

            [JsonProperty("id")]
            public long Id { get; set; }
        }

        public partial class ScoreFormat
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("shortName")]
            public string ShortName { get; set; }

            [JsonProperty("scoreDisplay")]
            public string ScoreDisplay { get; set; }

            [JsonProperty("isNumeric")]
            public bool IsNumeric { get; set; }

            [JsonProperty("isSelect")]
            public bool IsSelect { get; set; }

            [JsonProperty("isStars")]
            public bool IsStars { get; set; }

            [JsonProperty("numDecimals")]
            public long? NumDecimals { get; set; }

            [JsonProperty("base")]
            public long? Base { get; set; }

            [JsonProperty("options")]
            public Option[] Options { get; set; }
        }

        public partial class Option
        {
            [JsonProperty("_id")]
            public string Id { get; set; }

            [JsonProperty("val")]
            public long Val { get; set; }

            [JsonProperty("label")]
            public string Label { get; set; }
        }

        public enum ShortName { Pc, Ps4, Xb1 };

        public enum Name { TheWitcher3WildHunt };

        public enum Language { EnUs, EsEs, ItIt };

        public enum ScoreDisplay { ScoreDisplay100, The10, The100, The5Stars };

        public partial class Welcome9
        {
            public static Welcome9[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome9[]>(json, CodeBeautify.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Welcome9[] self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                ShortNameConverter.Singleton,
                ScoreDisplayConverter.Singleton,
                NameConverter.Singleton,
                LanguageConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ShortNameConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(ShortName) || t == typeof(ShortName?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "PC":
                        return ShortName.Pc;
                    case "PS4":
                        return ShortName.Ps4;
                    case "XB1":
                        return ShortName.Xb1;
                }
                throw new Exception("Cannot unmarshal type ShortName");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (ShortName)untypedValue;
                switch (value)
                {
                    case ShortName.Pc:
                        serializer.Serialize(writer, "PC");
                        return;
                    case ShortName.Ps4:
                        serializer.Serialize(writer, "PS4");
                        return;
                    case ShortName.Xb1:
                        serializer.Serialize(writer, "XB1");
                        return;
                }
                throw new Exception("Cannot marshal type ShortName");
            }

            public static readonly ShortNameConverter Singleton = new ShortNameConverter();
        }

        internal class ScoreDisplayConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(ScoreDisplay) || t == typeof(ScoreDisplay?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case " / 10":
                        return ScoreDisplay.The10;
                    case " / 10.0":
                        return ScoreDisplay.ScoreDisplay100;
                    case " / 100":
                        return ScoreDisplay.The100;
                    case " / 5 stars":
                        return ScoreDisplay.The5Stars;
                }
                throw new Exception("Cannot unmarshal type ScoreDisplay");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (ScoreDisplay)untypedValue;
                switch (value)
                {
                    case ScoreDisplay.The10:
                        serializer.Serialize(writer, " / 10");
                        return;
                    case ScoreDisplay.ScoreDisplay100:
                        serializer.Serialize(writer, " / 10.0");
                        return;
                    case ScoreDisplay.The100:
                        serializer.Serialize(writer, " / 100");
                        return;
                    case ScoreDisplay.The5Stars:
                        serializer.Serialize(writer, " / 5 stars");
                        return;
                }
                throw new Exception("Cannot marshal type ScoreDisplay");
            }

            public static readonly ScoreDisplayConverter Singleton = new ScoreDisplayConverter();
        }

        internal class NameConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                if (value == "The Witcher 3: Wild Hunt")
                {
                    return Name.TheWitcher3WildHunt;
                }
                throw new Exception("Cannot unmarshal type Name");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Name)untypedValue;
                if (value == Name.TheWitcher3WildHunt)
                {
                    serializer.Serialize(writer, "The Witcher 3: Wild Hunt");
                    return;
                }
                throw new Exception("Cannot marshal type Name");
            }

            public static readonly NameConverter Singleton = new NameConverter();
        }

        internal class LanguageConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Language) || t == typeof(Language?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "en-us":
                        return Language.EnUs;
                    case "es-es":
                        return Language.EsEs;
                    case "it-it":
                        return Language.ItIt;
                }
                throw new Exception("Cannot unmarshal type Language");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Language)untypedValue;
                switch (value)
                {
                    case Language.EnUs:
                        serializer.Serialize(writer, "en-us");
                        return;
                    case Language.EsEs:
                        serializer.Serialize(writer, "es-es");
                        return;
                    case Language.ItIt:
                        serializer.Serialize(writer, "it-it");
                        return;
                }
                throw new Exception("Cannot marshal type Language");
            }

            public static readonly LanguageConverter Singleton = new LanguageConverter();
        }
    }
}
